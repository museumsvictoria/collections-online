@using CollectionsOnline.Core.Config
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CollectionsOnline.WebSite.Models.DevelopersIndexViewModel>
@{
    Layout = "Layout.cshtml";
}
<div id="developers" class="container" role="main">
    <h1 id="maincontent">Developer Information</h1>
    <aside class="side-column">
        <h2>API Methods</h2>
        @foreach (var apiOperationMetadata in @Model.OperationMetadata)
        {   <h4>
            <a href="#@apiOperationMetadata.Name.ToLower()">@apiOperationMetadata.Name</a>
        </h4>
            <ul>
                @foreach (var metadata in apiOperationMetadata.Metadata)
                {
                    <li><a href="#@metadata.Name">@metadata.Path</a></li>
                }
            </ul>
        }
    </aside>
    <div class="documentation">
        <h2 id="api-overview">API Overview</h2>
        <p>Our API is a set of methods based on restful ideas over HTTP.  At this time it only supports the GET verb and responses are in JSON only.</p>
        <p>The root uri for the current version is located at</p>
        <pre>@Model.ApiRootUrl</pre>
        <h2 id="client-requirements">Client Requirements</h2>
        <p>The only requirement is that the client must supply a <code>User-Agent</code> header in the API request.  This can be blank if need be, but it must be present.</p>
        <h2 id="pagination">Pagination</h2>
        <p>Requests that return a list of objects will by default display @Constants.PagingPerPageDefault objects per request, you can change this to any number up to @Constants.PagingPerPageMax by using a <em>?perpage</em> query string parameter.</p>
        <p>You can also specify a page parameter to retrieve results from different pages via a <em>?page</em> query string parameter.</p>
        <h4>Link Header</h4>
        <p>The actual pagination information is stored in the response headers.  In order to allow easy traversing of data sets refer to the <a href="http://tools.ietf.org/html/rfc5988">Link header</a> to get the next page of objects in your request. E.g</p>
        <pre>Link: &lt;@Model.ApiRootUrl/items?perpage=@Constants.PagingPerPageDefault&amp;page=3&gt;; rel=&quot;next&quot;,&lt;@Model.ApiRootUrl/items?perpage=@Constants.PagingPerPageDefault&gt;; rel=&quot;prev&quot;</pre>
        <p>The total results and total pages is also stored in the response headers. E.g</p>
        <pre>Total-Results: 87366<br />Total-Pages: 2185</pre>
        <h4 id="response-envelope">Response Envelope</h4>
        <p>In order to make debuging with the api easy, we have included a way to encapsulate all the data needed for a response in the body of the response without having to dive into the actual headers. In order to do this simply add the value <em>?envelope=true</em> to the query string</p>

        @foreach (var apiOperationMetadata in @Model.OperationMetadata)
        {
            <div class="endpoint">
                <h2 id="@apiOperationMetadata.Name.ToLower()">Operations about @apiOperationMetadata.Name</h2>
                @foreach (var metadata in apiOperationMetadata.Metadata)
                {
                    <div id="@metadata.Name">
                        <p>
                            <h3>@metadata.Method</h3>
                            <h4>@metadata.Path</h4>
                            <br />
                            @if (!string.IsNullOrEmpty(metadata.Description))
                            {
                                <strong>Description</strong>
                            <p>@metadata.Description</p>
                            }
                            @if (!string.IsNullOrEmpty(metadata.ExampleUrl))
                            {
                                <strong>Example URL</strong>
                                <a href="@metadata.ExampleUrl">@metadata.ExampleUrl</a><br />
                            }
                        </p>
                        @if (metadata.Parameters.Any())
                        {
                            <strong>Parameters</strong>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Parameter</th>
                                        <th>Description</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var parameter in metadata.Parameters)
                                    {
                                        <tr>
                                            <td>
                                                <code>@parameter.Parameter</code><br />
                                                (@parameter.Necessity)
                                            </td>
                                            <td>
                                                <p>@Html.Raw(parameter.Description)</p>
                                                @if (parameter.ValidValues.Any())
                                                {
                                                    <p>
                                                        <strong>Valid values:</strong><br />
                                                        @foreach (var validValue in parameter.ValidValues)
                                                        {
                                                            <code>@validValue.Name</code><br />
                                                            <span>@validValue.Description</span><br />
                                                        }
                                                    </p>
                                                }
                                                @if (parameter.ExampleValues.Any())
                                                {
                                                    <p>
                                                        <strong>Example values:</strong><br />
                                                        @foreach (var exampleValue in parameter.ExampleValues)
                                                        {
                                                            <code>@exampleValue</code><br />
                                                        }
                                                    </p>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        @if (metadata.StatusCodes.Any())
                        {
                            <strong>Valid response status codes</strong>
                            <table>
                                <thead>
                                    <tr>
                                        <th>HTTP status code</th>
                                        <th>Name</th>
                                        <th>Reason</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var statusCode in metadata.StatusCodes)
                                    {
                                        <tr>
                                            <td>@((int)statusCode.Key)</td>
                                            <td>@statusCode.Key</td>
                                            <td>@statusCode.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        @if (!string.IsNullOrEmpty(metadata.SampleResponse))
                        {
                            <strong>Sample Response</strong>
                            <pre>@metadata.SampleResponse</pre>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>