@using CollectionsOnline.Core.Utilities
@using CollectionsOnline.WebSite.Extensions
@using CollectionsOnline.WebSite.Models
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CollectionsOnline.WebSite.Transformers.SpecimenViewTransformerResult>
@{
    Layout = "Layout.cshtml";
}
@section Head {
    <script src='https://api.tiles.mapbox.com/mapbox.js/v2.1.9/mapbox.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox.js/v2.1.9/mapbox.css' rel='stylesheet' />
}
@Html.Partial("Media", new MediaViewModel { Medias = Model.Specimen.Media.WithThumbnails(), DocumentId = Model.Specimen.Id })
<div id="title">
    <div class="wrapper">
        @Html.Partial("MediaTypes", Model.Specimen.Media.WithThumbnails())
        <h1 id="maincontent">
            <span class="reg-number specimen">Specimen @Model.Specimen.RegistrationNumber</span>
            @Html.Raw(Model.Specimen.DisplayTitle)
        </h1>
    </div>
</div>
<div id="record" role="main">
    <div class="wrapper">
        <section class="text-content">
            <div class="summary">
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.ObjectSummary))
                {
                    <h3>Summary</h3>
                    <p>@Html.ConvertNewlines(Model.Specimen.ObjectSummary)</p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.IsdDescriptionOfContent))
                {
                    <h3>Description Of Content</h3>
                    <p>@Model.Specimen.IsdDescriptionOfContent</p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.AcquisitionInformation))
                {
                    <h3>Acquisition Information</h3>
                    <p>@Model.Specimen.AcquisitionInformation</p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.Acknowledgement))
                {
                    <h3>Acknowledgement</h3>
                    <p>@Model.Specimen.Acknowledgement</p>
                }
                @if (Model.Specimen.Classifications.Any())
                {
                    <h3>Classification</h3>
                    <p>
                        @for (int i = 0; i < Model.Specimen.Classifications.Count; i++)
                        {
                            <a href="/search?classification=@HttpUtility.UrlEncode(Model.Specimen.Classifications[i])">@Model.Specimen.Classifications[i]</a>@(i != Model.Specimen.Classifications.Count - 1 ? ", " : "")
                        }
                    </p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.Significance))
                {
                    <h3>Significance</h3>
                    <p>@Html.ConvertNewlines(@Model.Specimen.Significance)</p>
                }
            </div>
            <h2>Specimen Details</h2>
            <div class="detail">
                <ul>
                    @if (@Model.Specimen.CollectionNames.Any())
                    {
                        <li>
                            <h3>Collection Names</h3>
                            <p>
                                @for (int i = 0; i < Model.Specimen.CollectionNames.Count; i++)
                                {
                                    <a href="/search?collection=@HttpUtility.UrlEncode(Model.Specimen.CollectionNames[i])">@Model.Specimen.CollectionNames[i]</a>@(i != Model.Specimen.CollectionNames.Count - 1 ? "," : "")
                                }
                            </p>
                        </li>
                    }
                    @if (Model.Specimen.Taxonomy != null)
                    {
                        <li>
                            <h3>Taxon Name</h3>
                            <p><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.TaxonName)">@Model.Specimen.Taxonomy.TaxonName</a></p>
                        </li>
                    }
                    @if (Model.Specimen.Taxonomy != null && !string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Author))
                    {
                        <li>
                            <h3>Author and date of publication</h3>
                            <p>@Model.Specimen.Taxonomy.Author</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TypeStatus))
                    {
                        <li>
                            <h3>Type Status</h3>
                            <p>@Model.Specimen.TypeStatus</p>
                        </li>
                    }
                    @if (Model.Specimen.Taxonomy != null)
                    {
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.CommonName))
                        {
                            <li>
                                <h3>Preferred Common name</h3>
                                <p>@Model.Specimen.Taxonomy.CommonName</p>
                            </li>
                        }
                        if (Model.Specimen.Taxonomy.OtherCommonNames.Any())
                        {
                            <li>
                                <h3>Other Common Names</h3>
                                <p>
                                    @foreach (var otherCommonNames in @Model.Specimen.Taxonomy.OtherCommonNames)
                                    {
                                        <span>@otherCommonNames</span>
                                    }
                                </p>
                            </li>
                        }
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.DateIdentified))
                    {
                        <li>
                            <h3>Date Identified</h3>
                            <p>@Model.Specimen.DateIdentified</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.IdentifiedBy))
                    {
                        <li>
                            <h3>Identified By</h3>
                            <p>@Model.Specimen.IdentifiedBy</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.NumberOfSpecimens) && string.IsNullOrWhiteSpace(Model.Specimen.ClutchSize))
                    {
                        <li>
                            <h3>Number Of Specimens</h3>
                            <p>@Model.Specimen.NumberOfSpecimens</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.ClutchSize) && string.IsNullOrWhiteSpace(Model.Specimen.NumberOfSpecimens))
                    {
                        <li>
                            <h3>Clutch Size</h3>
                            <p>@Model.Specimen.ClutchSize</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.Sex))
                    {
                        <li>
                            <h3>Sex</h3>
                            <p>@Model.Specimen.Sex</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.StageOrAge))
                    {
                        <li>
                            <h3>Stage Or Age</h3>
                            <p>@Model.Specimen.StageOrAge</p>
                        </li>
                    }
                    @if (Model.Specimen.Storages.Any())
                    {
                        <li>
                            <h3>Specimen Nature</h3>
                            <p>
                                @foreach (var storage in @Model.Specimen.Storages)
                                {
                                    <span>@storage.Nature @storage.Form @storage.FixativeTreatment @storage.Medium</span>
                                }
                            </p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.PetrologyRockName))
                    {
                        <li>
                            <h3>Rock Name</h3>
                            <p>@Model.Specimen.PetrologyRockName</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.PetrologyRockClass))
                    {
                        <li>
                            <h3>Rock Class</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.PetrologyRockClass)">@Model.Specimen.PetrologyRockClass</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.PetrologyRockGroup))
                    {
                        <li>
                            <h3>Rock Group</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.PetrologyRockGroup)">@Model.Specimen.PetrologyRockGroup</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.PetrologyRockDescription))
                    {
                        <li>
                            <h3>Rock Description</h3>
                            <p>@Model.Specimen.PetrologyRockDescription</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.PetrologyMineralsPresent))
                    {
                        <li>
                            <h3>Minerals Present</h3>
                            <p>@Model.Specimen.PetrologyMineralsPresent</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogySpecies))
                    {
                        <li>
                            <h3>Species</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogySpecies)">@Model.Specimen.MineralogySpecies</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyVariety))
                    {
                        <li>
                            <h3>Variety</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyVariety)">@Model.Specimen.MineralogyVariety</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyGroup))
                    {
                        <li>
                            <h3>Group</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyGroup)">@Model.Specimen.MineralogyGroup</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyClass))
                    {
                        <li>
                            <h3>Class</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyClass)">@Model.Specimen.MineralogyClass</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyTypeOfType))
                    {
                        <li>
                            <h3>Type of mineral type</h3>
                            <p>@Model.Specimen.MineralogyTypeOfType</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyAssociatedMatrix))
                    {
                        <li>
                            <h3>Associated Matrix</h3>
                            <p>@Model.Specimen.MineralogyAssociatedMatrix</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesName))
                    {
                        <li>
                            <h3>Name</h3>
                            <p>@Model.Specimen.MeteoritesName</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesClass))
                    {
                        <li>
                            <h3>Class</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MeteoritesClass)">@Model.Specimen.MeteoritesClass</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesGroup))
                    {
                        <li>
                            <h3>Group</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MeteoritesGroup)">@Model.Specimen.MeteoritesGroup</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesType))
                    {
                        <li>
                            <h3>Type</h3>
                            <p>@Model.Specimen.MeteoritesType</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesMinerals))
                    {
                        <li>
                            <h3>Minerals present</h3>
                            <p>@Model.Specimen.MeteoritesMinerals</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesSpecimenWeight))
                    {
                        <li>
                            <h3>Specimen Weight</h3>
                            <p>@Model.Specimen.MeteoritesSpecimenWeight</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesTotalWeight))
                    {
                        <li>
                            <h3>Total Weight</h3>
                            <p>@Model.Specimen.MeteoritesTotalWeight</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesDateFell))
                    {
                        <li>
                            <h3>Date specimen fell</h3>
                            <p>@Model.Specimen.MeteoritesDateFell</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesDateFound))
                    {
                        <li>
                            <h3>Date specimen found</h3>
                            <p>@Model.Specimen.MeteoritesDateFound</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesName))
                    {
                        <li>
                            <h3>Name</h3>
                            <p>@Model.Specimen.TektitesName</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesClassification))
                    {
                        <li>
                            <h3>Classification</h3>
                            <p><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.TektitesClassification)">@Model.Specimen.TektitesClassification</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesShape))
                    {
                        <li>
                            <h3>Shape</h3>
                            <p>@Model.Specimen.TektitesShape</p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesLocalStrewnfield))
                    {
                        <li>
                            <h3>Local Strewnfield</h3>
                            <p><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.TektitesLocalStrewnfield)">@Model.Specimen.TektitesLocalStrewnfield</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesGlobalStrewnfield))
                    {
                        <li>
                            <h3>Global Strewnfield</h3>
                            <p><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.TektitesGlobalStrewnfield)">@Model.Specimen.TektitesGlobalStrewnfield</a></p>
                        </li>
                    }
                    @foreach (var association in @Model.Specimen.Associations)
                    {
                        <li>
                            <h3>@association.Type</h3>
                            <p>@Html.RenderAssociationDescription(association)</p>
                        </li>
                    }
                    @if (Model.Specimen.CollectionEvent != null)
                    {
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.ExpeditionName))
                        {
                            <li>
                                <h3>Expedition Name</h3>
                                <p><a href="/search?keyword=@HttpUtility.UrlEncode(Model.Specimen.CollectionEvent.ExpeditionName)">@Model.Specimen.CollectionEvent.ExpeditionName</a></p>
                            </li>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.CollectedBy))
                        {
                            <li>
                                <h3>Collected By</h3>
                                <p>@Model.Specimen.CollectionEvent.CollectedBy</p>
                            </li>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.CollectionEventCode))
                        {
                            <li>
                                <h3>Collection Event Code</h3>
                                <p>@Model.Specimen.CollectionEvent.CollectionEventCode</p>
                            </li>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.SamplingMethod))
                        {
                            <li>
                                <h3>Sampling Method</h3>
                                <p>@Model.Specimen.CollectionEvent.SamplingMethod</p>
                            </li>
                        }
                        if (Model.Specimen.CollectionEvent.DateVisitedFrom.HasValue)
                        {
                            <li>
                                <h3>Date Visited From</h3>
                                <p>@Model.Specimen.CollectionEvent.DateVisitedFrom.Value.ToString(Model.Specimen.CollectionEvent.DateVisitedFrom.Value == Model.Specimen.CollectionEvent.DateVisitedFrom.Value.Date ? "d" : "g")</p>
                            </li>
                        }
                        if (Model.Specimen.CollectionEvent.DateVisitedTo.HasValue)
                        {
                            <li>
                                <h3>Date Visited To</h3>
                                <p>@Model.Specimen.CollectionEvent.DateVisitedTo.Value.ToString(Model.Specimen.CollectionEvent.DateVisitedTo.Value == Model.Specimen.CollectionEvent.DateVisitedTo.Value.Date ? "d" : "g")</p>
                            </li>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.DepthTo))
                        {
                            <li>
                                <h3>Depth To (m)</h3>
                                <p>@Model.Specimen.CollectionEvent.DepthTo</p>
                            </li>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEvent.DepthFrom))
                        {
                            <li>
                                <h3>Depth From (m)</h3>
                                <p>@Model.Specimen.CollectionEvent.DepthFrom</p>
                            </li>
                        }
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.Category))
                    {
                        <li>
                            <h3>Category</h3>
                            <p><a href="/search?category=@HttpUtility.UrlEncode(@Model.Specimen.Category.ToLower())">@Model.Specimen.Category</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.ScientificGroup))
                    {
                        <li>
                            <h3>Scientific Group</h3>
                            <p><a href="/search?specimenscientificgroup=@HttpUtility.UrlEncode(@Model.Specimen.ScientificGroup.ToLower())">@Model.Specimen.ScientificGroup</a></p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.Discipline))
                    {
                        <li>
                            <h3>Discipline</h3>
                            <p><a href="/search?collection=@HttpUtility.UrlEncode(@Model.Specimen.Discipline.ToLower())">@Model.Specimen.Discipline</a></p>
                        </li>
                    }
                    @if (@Model.Specimen.CollectingAreas.Any())
                    {
                        <li>
                            <h3>Collecting Areas</h3>
                            <p>
                                @for (int i = 0; i < Model.Specimen.CollectingAreas.Count; i++)
                                {
                                    <a href="/search?collectingarea=@HttpUtility.UrlEncode(Model.Specimen.CollectingAreas[i])">@Model.Specimen.CollectingAreas[i]</a>@(i != Model.Specimen.CollectingAreas.Count - 1 ? "," : "")

                                }
                            </p>
                        </li>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specimen.Type))
                    {
                        <li>
                            <h3>Type of Item</h3>
                            <p><a href="/search?itemtype=@HttpUtility.UrlEncode(@Model.Specimen.Type.ToLower())">@Model.Specimen.Type</a></p>
                        </li>
                    }
                    @if (Model.Specimen.Keywords.Any())
                    {
                        <li>
                            <h3>Keywords</h3>
                            <p>
                                @for (int i = 0; i < Model.Specimen.Keywords.Count; i++)
                                {
                                    <a href="/search?keyword=@HttpUtility.UrlEncode(Model.Specimen.Keywords[i])">@Model.Specimen.Keywords[i]</a>@(i != Model.Specimen.Keywords.Count - 1 ? ", " : "")

                                }
                            </p>
                        </li>
                    }
                </ul>
                @if (Model.Specimen.Taxonomy != null)
                {
                    <h3 class="sub-heading">Taxonomy</h3>
                    <ul>
                        @Html.Partial("Taxonomy", Model.Specimen.Taxonomy)
                    </ul>
                }
                @if (Model.GeoSpatial.Any())
                {

                    <div>
                        <div id="mapdata">
                            <h3 class="sub-heading">Geospatial Information</h3>
                            <ul>
                                @foreach (var geoSpatial in Model.GeoSpatial)
                                {
                                    <li>
                                        <h3>@geoSpatial.Key</h3>
                                        <p>@Html.Raw(geoSpatial.Value)</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="map"></div>
                    </div>
                }
            </div>
        </section>
        @Html.Partial("MuseumLocation", Model.Specimen.MuseumLocation)
        <aside class="side-content">
            <div class="enquiry">
                <a href="https://museumsvictoria.com.au/ask-us/general-research-enquiries/?cid=@Model.Specimen.Id&title=@HttpUtility.UrlEncode(HtmlConverter.HtmlToText(Model.Specimen.DisplayTitle))#EnquiryForm">
                    <span>Got a Question?</span>
                    <span>Send us an enquiry</span>
                </a>
            </div>
        </aside>
        @Html.Partial("FileUriMedia", Model.Specimen.Media)
        <aside class="side-content" role="complementary">
            <div class="sidecolumn">
                @Html.Partial("SocialLinks")
            </div>
            <div class="sidecolumn">

                <div class="cite">
                    <h4>Cite this page</h4>
                    <p>@Html.RenderCitation(Model.Specimen)</p>
                    @Html.Partial("RecordLicence", Model.Specimen.Licence)
                </div>
            </div>
        </aside>
    </div>
</div>
@if (Model.RelatedItems.Any() || Model.RelatedSpecimens.Any() || Model.RelatedArticles.Any() || (Model.RelatedSpecies != null && Model.RelatedSpecies.Any()))
{
    <div id="related">
        <div class="wrapper">
            <div class="related-content">
                <h3>
                    Showing related
               </h3>
                @foreach (var relatedItem in Model.RelatedItems)
                {
                    @Html.Partial("RecordTile", relatedItem)
                }
                @foreach (var relatedSpecimen in Model.RelatedSpecimens)
                {
                    @Html.Partial("RecordTile", relatedSpecimen)
                }
                @foreach (var relatedArticle in Model.RelatedArticles)
                {
                    @Html.Partial("RecordTile", relatedArticle)
                }
                @foreach (var relatedSpecies in Model.RelatedSpecies)
                {
                    @Html.Partial("RecordTile", relatedSpecies)
                }
            </div>
        </div>
    </div>
}
<script>
    @if (Model.Specimen.Media.WithThumbnails().Any())
    {
        @:var mediaModel = @Html.ConvertToJson(Model.Specimen.Media.WithThumbnails());
    }
    @if (Model.LatLongs.Any())
    {
        @:var latlongsModel = @Html.ConvertToJson(Model.LatLongs);
    }
</script>